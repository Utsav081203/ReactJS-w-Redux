React:-
*Open-Source JavaScript Library to build Dynamic and Interactive UI
*Finally the Code that executes is JavaScipt itself
*React provides pre-written code for commonly used things and functionalities
*Single Page Application (SPA)

DOM:-
Document Object Model
Browser creates DOM Structure(Tree Structure) using HTML file
Then applies styling to elements using CSS file
JS modifies DOM based on user actions and events

Problems in JS:-
React has simpler mental model
DOM complexity in JS

Working of React:-
Provision for automatic querying and updating DOM elements
Web page using small and reusable components

JS is imperative(define steps to reach desired state)
React is decalarative(define target UI state and react figures out how to reach it)

*Components:-
Resuable, Modular, Organised
Kind of like template to resuse
React is Tree of components like DOM is a Tree
App is the root component

GitHub Basics:-
Creating Repository in GitHub and executing commands specified

React Documentation:-
react.dev

React is a core Library.

Attachments:-
react-dom (for webs)
react-native (for mobile apps)

npx for directly executing packeges wihtout installation

create-react-app, create is a utility, is very bulky, more package size.

package.json is used to analyze any project
dependencies: which libraries or packages we have
scripts: start, build, test.....

Create React Projects:-
npx create-react-app nameofproject (not preferrable)
cd nameofproject
npm run start

npm run build makes a folder named build which is the files served to user

npm install:- Installs all required packages in the folder

Using Vite:-
npm create vite@latest
npm run dev

Main work done in src folder to make changes in the App
npm run script [mentioned in package.json]

To inject javascript or manipulate html, we need to include it.

Which files into Git or not in gitignore file.

Some dependencies are locked in package-lock.json.

Readme is mardown file.

In Public Folder:
manifest.json used for mobile version.
robots.txt for search engine.
index.html is single page and all work done in it.

DOM is a tree structure.
React is the Core Foundational Library.
React-DOM is the implementation of it on Web.

In src folder:
In index.js file, root variable stores DOM variable
Browser has its own DOM, React creates its own DOM called Virtual DOM.

Browser renders HTML.

Vite is much more strict in terms of naming.
We need to make files in .jsx for components or anything and in Uppercase (component name).
Unlike in normal.

Even in create react app version, you need to capitalize first word of components

Best practice is to keep file name capitalised

In create react app keep extension jsx or js doesn't matter

Basic Convention is to keep jsx for ones which return HTML
and js for only javascript code

In HTML scripts are injected differently using either react scripts or manual addition in both ways
In parallel to Browser DOM, React DOM is also created
HTML is injected and removed in single HTML file of index.html
The scripts are run using react and react-dom

index.js and main.jsx is where the virtual DOM is created in normal and vite.

React uses Bundler to make syntax like <MyApp /> etc....

jsx: javascript + html

function Component(){return (html code)}
this html code is converted/parsed into object type code like in custom React file to make tree of html
<App /> can also be written as App()


Hooks used to update every instance of variable in UI

Virtual DOM:
createRoot creates DOM like structure and compares to main DOM and updates only the parts modified.
unlike Browser that reloads entire DOM.
Virtual DOM tracks changes in tree structure of DOM.
Optimal Update, drop update requests if another update is on the way (for the same element).
Fiber Algorithm used for updation.
pause, resume, prioritize updates.

Hydration Process: DOM elements unreactive before it, so javascipt injected.

Reconciliation: Algorithm to diff one tree with another and conclude which parts to update.

setState used to re-render.

Reconciliation is behind Virtual DOM.

Diffing of lists is done using keys.

Abort prrevious updates if new update is on the way.

Props makes components reusable.
Substitute your wanted information to show in the component using props.

[[..]] is hidden scope.

const arr = [...]
the inner elements could change though

Integrate Tailwind in you project: Refer Documentation and begin.

useCallback is a React Hook that lets us cache a function definition between re-renders.
It is used to return a memoized callback function.
This allows us to isolate resource intensive functions so that they will not automatically run on every render.
The useCallback Hook only runs when one of its dependencies update.

useEffect lets us synchronize component with external system

useRef used to reference

If we are not meaning to return any html and write only basic javascript code, then make .js file only

React Router DOM is written by 3rd party developers
npm install react-router-dom

Link tag in jsx used instead of <a> tag of HTML
since <a> tag refreshes entire page

NavLink tag in jsx
Either import individually or import all components in one jsx and finally export that jsx file to be able to import in the main.jsx

loader in react-router: upon hover (before clicking icon), the api call starts fetching things even before useEffect dependency calls (whatever was meant to do)
even uses cache to store those data

We will refrain to use self closing tags if we want some branching inside it in react router method 2

useLoaderData is a Hook

If nested components, then use of props becomes complicated since everytime we need to pass values, we need to pass it to each parent of that child where it is to be used
This is Prop-Drilling
Thus Context-API or Redux is used.
Redux is for state management.
Redux ToolKit (RTK).
State Management.

Using Tailwind, dark and light classes exist

Functionality, Methods was written in App.jsx while using ContextApi

...arr becomes the list of elements of that arr

Local Storage in JavaScipt: Browser Local Storage/Session Storage.
We need to convert into JSON from string here.

JSON could also give us arrays through parsing.

If the dependency array is kept empty ([]), the effect will only run once, after the initial render. This means the effect will be triggered when the component is first mounted.

Till now we explored: Components till now were based on functions, exported them after writin logic but class based components exist too!

Redux:
It is an independent state management Library.
We get to use Redux in any stack/framework we want to use.
In React, we use react-redux.

Till now what Context API has been:
Prop drilling where we need to pass prop values to the parents of component we want prop value in.
So we set Global Context known Context API from which any component can have access to.

Central Storage (Global Variable) is what we need
Data Flow is not as strong in context as in redux.
Data flow is to update the variables and extract the variables later for use.

Reducers update data in Redux.
State must be read only in Redux.
Changes in data must be through functions and reducers only.
Redux can be used for Vue, React,.....

Redux Toolkit has more abstraction.

rtk:
Store is Single Source of Truth (Global Variable type).
reducers change mini portions of store.
react-redux:
useSelector
useDispatch: uses reducer to change store.

npm install @redux/Toolkit
npm install react-redux

@reduxjs.toolkit is core redux library.

Create Store:
import configureStore method.
export variable store which is instance of it.
it takes object as parameter.

Reducers are called slices in rtk.

nanoid used to generate unique ids.

when a function is defined (say named func),
then func() calls it but func only references it.

we always will have access to both state and action.
state will have global variable values, but action will have values specific to a method.
react-redux is for communication btw react and redux.
To create slice, we need a name, initial state and list of reducers.

State change could lead to re renders.

React/Frontend perspective must be to get data from api handling and display it to the user.

Appwrite is Backend as a service. Open Source.
TinyMCE used for text editor.
html-react-parser.
react hook forms.

environment variables: critical information must should not be able to get extracted from source code and browser.
such system variables are defined in .env

we ourselves need system variables
thus we make .env.sample

environment variable file loads once.
if file updated, we might need to restart Application.
env file is defined in process.

in cra, we need to define env variables using prefix of REACT_APP_.....
and access is done using process.env._____

in vite, VITE_ is prefix.
and access is import.meta.env.___

An .env.sample file is typically used in projects to provide a template of environment variables that need to be configured for the application to run properly. This file does not contain actual sensitive data like API keys or passwords but instead serves as a guide for developers to know what variables are needed.

Indexes used for filtering.
Indexing is done on an attribute.
env variables must be in string form.

better practice to export at once in js file where we parse all into strings.

Concept of Vendor Locking.
If we were to not continue one of our services from 3rd party organistion.
then too the written logic could work.
Services are made.

In short we write services code where the inner working is still based on appwrite or 3rd party service we opt for.
but when we desire to switch 3rd party service, we just need to re-write inner working not those classes/services and also no change outside that.
Better Code Practice.
Just read Documentation and place everything in the working code of services.
This way there will be no change in frontend at all.
The methods that frontend calls to get services and data is still the same.
Just the under the hood logic changes in backend (logic of those methods).
Abstraction for frontend.

From Redux Chrome Dev Tools, we know the state (values of it now), actions that took place through dispatch and all.

Overview of Application:
components have parts of web which are going to be assembled in main page.
appwrite is related to Appwrite services, which provide backend functionalities like authentication and database access.
auth.js: services for auth
config.js: services for crud
conf.js: configuration is centralized for appwrite
store.js: global application state managed here
authSlice.js: manages authentication with redux store

login and logout is defined in both authSlice as well as auth.

in authSlice, it defines a Redux action and reducer for managing authentication state in the Redux store.
in auth, it provides a method to interact with the Appwrite backend to authenticate a user and create a session.

basically, one is solely for state management and other is for actual session management and backend service.

in React StrictMode, it renders twice.

BlackBox API, is where we don't know behind the scenes how data is fetched but rather used as black box to get data.

Edge cases and special real world edge cases need to be handled in API usage and creation.

()() is iife
ex:
(function() {
    //code to be executed immediately
})();

race condition:
whenever input field changes, api call is made.
numerous useless calls made thus.

Debouncing, de throttling:
we dont desire the output from old api calls
just the last/most recent api call is meant to be responded

Race condition : it focus only reply each API call Sequentially not cancelling unnecessary API calls

Network chrome dev tool is used to see api calls 

For a component to be mounted in ReactJS it means to be initialized and inserted in the DOM